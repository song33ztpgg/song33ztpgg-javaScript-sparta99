const jwt = require("jsonwebtoken");
const User = require("../schemas/user");

// 사용자 인증 미들웨어
module.exports = async (req, res, next) => {
  const { Authorization } = req.cookies;
  const [authType, authToken] = (Authorization ?? "").split(" ");
 

  //jwt토큰값들~~~ 이 없을 수도 있기에 아래와 같은 if문 사용
  if (!authToken || authType !== "Bearer") {
    res.status(401).send({
      errorMessage: "로그인 후 이용 가능한 기능입니다.(인증 미들웨어)",
    });
    return;
  }


  try {
    //authToken이 만료 되었는가(verify)
    const { userId } = jwt.verify(authToken, "custom-secret-key");                                       
    const user = await User.findById(userId);

    res.locals.user = user;
  
    //성공되었으면 다음 미들웨어로
    next();

  } catch (err) {
    console.error(err);
    res.status(401).send({
      errorMessage: "로그인 후 이용 가능한 기능입니다.",
    });
  }
}; 

/*
const jwt = require("jsonwebtoken");
const User = require("../schemas/user");

// 사용자 인증 미들웨어
module.exports = async (req, res, next) => {
 
    //브라우저가 전달한 쿠키내용 중 
    //auth.js 에서 선언한 Authorization 가져온다
  const { Authorization } = req.cookies;
  
  // ?? : Authorization 값이 비었거나 null일 경우 "" 을값을 대치를 해준다 
  // (값이 존재 하지 않으면 오류가 발생하기 때문)
 
  // `Bearer ${token}` => Bearer jwt토큰값들~~~~~~~ 에서 bearer와 jwt값을 구분짓기 위해 split 
  // [] 리스트 타입으로 [authType = bearer,  authToken = jwt토큰값들~~~] 
  const [authType, authToken] = (Authorization ?? "").split(" ");
 

  //jwt토큰값들~~~ 이 없을 수도 있기에 아래와 같은 if문 사용
  if (!authToken || authType !== "Bearer") {
    res.status(401).send({
      errorMessage: "로그인 후 이용 가능한 기능입니다.(인증 미들웨어)",
    });
    return;
  }

  //jwt검증
  //jwt 에러를 발견하고 멈춰버리는것을 방지하기위해 try ,catch 사용
  try {

    //authToken이 만료 되었는가(verify)
    //authToken이 서버가 발급한 토큰인가(시크릿키)
    const { userId } = jwt.verify(authToken, "custom-secret-key");
                                             

    //authToken이 있는 userId에 해당하는 사용자가 실제 DB에 존재하는 가
    const user = await User.findById(userId);

    //사용자 정보 조회를 위해
    res.locals.user = user;
  
    //성공되었으면 다음 미들웨어로
    next();

  } catch (err) {
    console.error(err);
    res.status(401).send({
      errorMessage: "로그인 후 이용 가능한 기능입니다.",
    });
  }
}; 
*/