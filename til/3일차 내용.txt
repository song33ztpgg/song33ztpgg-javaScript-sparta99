맥시컬 환경 / 실행시 만듬 
평가와 실행하는 단계중  
평가는 호이스팅 단계라고 한다 

코드가 실행되려면 정보가 필요하고 맥시컬 환경을 만들어야 실행되지 않을까 

함수가 실행될때 함수가 실행 컨텍스트 위에 올라가고 코드가  실해ㅇ되면 렉시컬 환경(함수가 호출되면서 실행될 코드들이 담겨잇는곳)
이 필요하고 렉스컬 환경을 미리 만들어두기 위해 호이스팅이 일어난다

순서 
const ZZZZ = {
	1.바깥 환경에 대한 참조 : (window) 
	2.변수와 참조 : ;

} 

변수 선언시 변수에 할당할 수 있는 값의 데이터 타입을 선언 해야함(명시적 타입 선언) 
변수의 타입을 변경할 수 없고 변수에 선언한 타입에 맞는 값 만 할당 할수 있다. 컴파일 시점에 타입체크를 수행하여 
타입이 맞지 않으면 에러를 발생시키고 프로그램 실행을 막는다 

호이스팅 :  실행 직전 전체 함수와 변수초기화들을 맨 윗부분에 실행된것 처럼 인식하는것 
temp dead zone : 변수가 초기화가 미리 선언되지 않아서 값을 인식 하지 못하는 것

스코프 :  { } , 함수 안에 지역 변수 값에 변수를 찾지 못하면 상위(전역 변수)값을 가져온다
★기본형 데이터와 참조형 데이터를 굳이 왜 구분해서 다룰까요? 혹시 하나의 방식으로 다 다룰수는 없을까요?
기본형 데이터는 데이터 타입에 따라 할당되는 메모리 크기 가 정해져 있지만 
오브젝트 같은 참조형은 메모리크기가 정의에 따라 천차만별이라
메모리 절약을 위해

스코프 
★식별자가 유요한 범위,함수나 변수같은 시별자를 찾지위한 규칙 
각함수들의 실행컨텍스트가 순서에 맞게 맞게 작용하기 위해서 구분 짓는 경계선 

렉시컬스코프 : 선언을 어디서 했느냐가 중요하다.  변수를 함수3에서 호출할때 변수가 함수3내부에 없을 경우 상위 함수2에서  
함수2에서 값이 없으면 함수1로 더 없으면 전역변수에서 찾는 과정
함수1( 함수2 ( 함수3(  ) ) )




