다양한 언어가 생기는 이유는  컴파일 여부", “성능/안정성과 편의성의 Trade-off 관계”, “패러다임
자바스크립스예전 버전과 ES5호환이 되지 않기 때문에 가장 맨 윗쪽 코드에 "use strict"; 붙여준다(필수) 
prompt("변수 이름") = scannf('%d')
confirm(내용 or 글) = 확인/취소 창이 뜬다
const : 상수값을 한번주면 절대 변하지 않는다 , 그리고 대부분 이름을 지을때 전부 대문자로 표시한다

카멜 표기법(camelCase)이 흔히 사용됩니다. 카멜 표기법은 단어를 차례대로 나열하면서 첫 단어를 제외한 각 단어의 첫 글자를 대문자로 작성합니다. myVeryLongName같이 말이죠.
동적 타입(dynamically typed)’ 언어: 타입은 있지만 변수에 저장되는 값의 타입은 언제든지 바꿀 수 있는 언어

예약어 : let, class, return, function
수식 결과 : Infinity ( 1/0 같은 계산), NaN( 글자 * 158 같은 계산이 되지않는 결과), undefined(선언하고 아직 아무값도 넣지 않은것, 초기화를 하지 않았다 (?)) 
BigInt : 아주 긴 숫자를 표현할때 사용, 끝에 n을 선언 해주어야 함 (ex let bigInt = 158n;)
typeof : 해당 변수의 자료형을 표현 (ex a = 10; ,b=true, typeof (a,b,alert) =>> number,boolean,function)

빽다옴표를 사용하는 이유 
alert( "결과는 =  ${1 + 2}" );   // 결과는 ==>>  ${1 + 2}
alert( `결과는 = ${1 + 2}` );    // 결과는 ==>> 3
alert( '6' / '2' ); 		     //결과는  ==>> 3

alert( +true );		    // 1
alert( +"" );   		    // 0

a = (1 + 2, 3 + 4);  
alert( a ); 			   // 7  마지막 값만 계산

let a = +prompt("덧셈할 첫 번째 숫자를 입력해주세요.", 1);
let b = +prompt("덧셈할 두 번째 숫자를 입력해주세요.", 2);
alert(a + b); // 3


data = 158
typeof data   		  // number 
typeof data = String(data); // string 
typeof data = Number(data); // number

피연산자(operand)  or 인수 :연산자가 연산을 수행하는 대상입니다 ; (ex 15 + 8 =>> 피연산자는 15,8을 가리키는 말)
거듭제곱 연산자 **
나머지 연산자 %

동등 연산자(equality operator) ==은 0과 false를 구별하지 못합니다.
일치 연산자(strict equality operator) ===를 사용하면 형 변환 없이 값을 비교할 수 있습니다.

if문 
숫자 0, 빈 문자열"", null, undefined, NaN은 불린형으로 변환 시 모두 false가 됩니다. 이런 값들은 ‘falsy(거짓 같은)’ 값이라고 부릅니다.
조건문 ? value1 : value2;
while문 = 불린형태의 값으로

continue 반복문 중간에 배치해서 이문구 보다 하단에 있는 문장은 실행하지 않고 다시 반복문 시작한다

레이블(label) 은 반복문 앞에 콜론과 함께 쓰이는 식별자 = for문의 이름,id같은거


결과 
주석에 들어가면 좋은 내용
	고차원 수준 아키텍처
	함수 용례
	당장 봐선 명확해 보이지 않는 해결 방법에 대한 설명
	주석에 들어가면 좋지 않은 내용

'코드가 어떻게 동작하는지’와 '코드가 무엇을 하는지’에 대한 설명
코드를 간결하게 짤 수 없는 상황이나 코드 자체만으로도 어떤 일을 하는지 충분히 판단할 수 없는 경우에만 주석을 넣으세요.

------------------------------------------


타임스크립트 :
패러다임에서 문법 지원을 하는걸 알기 위해

============= =알아볼것=============  
메시지가 있는 작은 창은 모달 창(modal window) 이라고 부릅니다. '모달’이란 단어엔 페이지의 나머지 부분과 상호 작용이 불가능하다는 의미가 내포되어 있습니다. 따라서 사용자는 모달 창 바깥에 있는 버튼을 누른다든가 하는 행동을 할 수 없습니다. 확인 버튼을 누르기 전까지 말이죠.  = 모달창의 위치는 브라우져가 결정 유져가 결정하는건 아니다

3을 입력하였더라도 세 번째 alert문은 실행되지 않습니다. 앞서 배운 바와 같이 prompt 함수는 사용자가 입력 필드에 기재한 값을 문자열로 변환해 반환하기 때문에 숫자 3을 입력하더라도 prompt 함수는 문자열 '3'을 반환합니다. 그런데 세 번째 case문에선 사용자가 입력한 값과 숫자형 3을 비교하므로, 형 자체가 다르기 때문에 case 3 아래의 코드는 절대 실행되지 않습니다. 대신 default문이 실행됩니다.
 case 3:
    alert( '이 코드는 절대 실행되지 않습니다!' );

함수형 언어
함수형(functional) 프로그래밍 언어는 변숫값 변경을 금지합니다. 스칼라(Scala)와 얼랭(Erlang)은 대표적인 함수형 언어입니다.

이들 언어에서는 ‘상자 속에’ 값이 일단 저장되면, 그 값을 영원히 유지합니다. 다른 값을 저장하고 싶다면 새로운 상자를 만들어야(새 변수를 선언해야)만 합니다. 이전 변수를 재사용할 수 없습니다.

처음 봤을 땐 좀 이상해 보일 수 있지만, 함수형 언어는 중대한 개발에 상당히 적합한 언어입니다. 이런 제약이 장점으로 작용하는 병렬 계산(parallel computation)과 같은 영역도 있죠. 당장은 사용할 계획이 없더라도 이런 언어를 공부하는 것은 시야를 넓히는 데 도움이 되므로, 학습을 권유 드립니다. 



alert("" + 1 + 0)           // 1 둘다 문자로 표현되는거 아닌가 왜 여기는 10 밑에는 -1
alert("" - 1 + 0)           //-1 


변수이름 앞에  !붙이는 행위


let a = 0;
alert( Boolean(a) ); // false
let b = "0";
alert( Boolean(b) ); // true
alert(a == b); // true!
두 값(a와 b)을 비교하면 참이 반환되는데, 값을 논리 평가한 후 비교하면 하나는 참, 하나는 거짓이 반환된다는 점에 고개를 갸우뚱할 수도 있습니다. 그런데 자바스크립트 관점에선 이런 결과가 아주 자연스럽습니다. 동등 비교 연산자 ==는 (예시에서 문자열 "0"을 숫자 0으로 변환시킨 것처럼) 피연산자를 숫자형으로 바꾸지만, 'Boolean’을 사용한 명시적 변환에는 다른 규칙이 사용되기 때문입니다.

https://smallzoodevs-organization.gitbook.io/javascript-study-1/day-01.-hello-world/2.

